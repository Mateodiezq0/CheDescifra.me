@page "/chedesciframe"

@using frontend.logic
@using System.Globalization
@using System.Text
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<h3>Decipher Game</h3>

@if (loading)
{
    <p>Cargando frase...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}
else if (gameWon)
{
    <p style="color: green; font-size: 24px;">¡Ganaste!</p>
}
else
{
    <!-- Contenedor principal -->
    <div style="font-family: monospace;">
        <!-- Primera fila: Casillas de texto para descifrar -->
        <div style="display: flex; gap: 2px;">
            @foreach (char c in gameLogic.EncodedText)
            {
                if (char.IsLetter(c))
                {
                    <input 
                        id="input-@c" 
                        style="width: 30px; text-align: center;" 
                        maxlength="1" 
                        value="@GetMappedChar(c)" 
                        @oninput="(e) => UpdateSubstitution(c, ((ChangeEventArgs)e).Value?.ToString()?.ToUpper())" 
                    />
                }
                else
                {
                    <span style="display: inline-block; width: 30px; text-align: center;">@c</span>
                }
            }
        </div>

        <!-- Segunda fila: Letras codificadas como referencia -->
        <div style="display: flex; gap: 2px; margin-top: 5px;">
            @foreach (char c in gameLogic.EncodedText)
            {
                <span style="display: inline-block; width: 30px; text-align: center;">@c</span>
            }
        </div>
    </div>

    <p>Estado del juego: @gameWon</p>

    <button @onclick="DebugGameState">Debug State</button>

    <button @onclick="ResetGame" style="margin-top: 10px;">Reset</button>
}

@code {
    private GameLogic? gameLogic; // Lógica del juego
    private bool loading = true; // Estado de carga
    private string? errorMessage; // Mensaje de error
    private bool gameWon = false; // Estado de victoria

    private void DebugGameState()
    {
        if (gameLogic != null)
        {
            var cipherText = gameLogic.CipherText;
            var decryptedText = gameLogic.DecryptedText; // Usa la propiedad existente
            var substitutionMap = gameLogic.SubstitutionMap;
            var originalMap = gameLogic.OriginalSubstitutionMap;

            var isWon = gameLogic.IsGameWon();

            // Mostrar en consola los detalles clave
            var debugData = new
            {
                CipherText = cipherText,
                DecryptedText = decryptedText,
                SubstitutionMap = substitutionMap,
                OrigianlMap = originalMap,
                IsWon = isWon
            };

            JSRuntime.InvokeVoidAsync("console.log", debugData);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Realizar la solicitud HTTP para obtener la frase aleatoria
            var response = await Http.GetFromJsonAsync<FraseDto>("api/PedirFraseRandom/random");

            if (response != null && !string.IsNullOrEmpty(response.Contenido))
            {
                // Inicializar la lógica del juego con la frase obtenida
                gameLogic = new GameLogic(response.Contenido); // El texto ya será normalizado
                loading = false;
            }
            else
            {
                errorMessage = "No se pudo obtener una frase válida del servidor.";
                loading = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al obtener la frase: {ex.Message}";
            loading = false;
        }
    }

    private string GetMappedChar(char cipherChar)
    {
        if (gameLogic == null) return string.Empty;
        return gameLogic.SubstitutionMap.TryGetValue(cipherChar, out var plainChar) ? plainChar.ToString() : string.Empty;
    }

    private void UpdateSubstitution(char cipherChar, string? plainChar)
    {
        if (gameLogic != null && !string.IsNullOrEmpty(plainChar))
        {
            var normalizedChar = RemoveDiacritics(plainChar)[0];

            if (char.IsLetter(normalizedChar))
            {
                gameLogic.SetSubstitution(cipherChar, normalizedChar);
                gameWon = gameLogic.IsGameWon(); // Usa la nueva lógica con comparación de mapas
                StateHasChanged(); // Actualizar la UI
            }
        }
    }

    private void ResetGame()
    {
        if (gameLogic != null)
        {
            gameLogic = new GameLogic(gameLogic.CipherText);
            gameWon = false; // Reiniciar estado de victoria
        }
    }

    private string RemoveDiacritics(string text)
    {
        var normalizedText = text.Normalize(NormalizationForm.FormD);
        var sb = new StringBuilder();

        foreach (var c in normalizedText)
        {
            if (CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark)
            {
                sb.Append(c);
            }
        }

        return sb.ToString();
    }

    public class FraseDto
    {
        public int Id { get; set; }
        public string Contenido { get; set; } = string.Empty;
    }
}

<style>
    input:focus {
        outline: 2px solid blue; /* Cambia el color según tus preferencias */
        border-color: blue;
    }

    input {
        border: 1px solid #ccc;
        border-radius: 3px;
        padding: 5px;
        margin: 2px;
        font-size: 16px;
    }
</style>
