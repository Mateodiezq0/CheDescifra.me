@page "/chedesciframe"

@using frontend.logic
@using System.Globalization
@using System.Text
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h3>Decipher Game</h3>

@if (loading)
{
    <p>Cargando frase...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}
else if (gameWon)
{
    <p style="color: green; font-size: 24px;">¡Ganaste!</p>
}
else
{
    <!-- Primera fila: Casillas de texto para descifrar -->
    <div style="display: flex; gap: 2px;">
        @foreach (char c in gameLogic.EncodedText)
        {
            if (char.IsLetter(c))
            {
                <input 
                    id="input-@c" 
                    style="width: 30px; text-align: center;" 
                    maxlength="1" 
                    value="@GetMappedChar(c)" 
                    @oninput="(e) => HandleInput(c, ((ChangeEventArgs)e).Value?.ToString()?.ToUpper())" 
                    @onkeydown="(e) => HandleKeyDown(e, c)" 
                />
            }
            else
            {
                <span style="display: inline-block; width: 30px; text-align: center;">@c</span>
            }
        }
    </div>

    <!-- Segunda fila: Letras codificadas como referencia -->
    <div style="display: flex; gap: 2px; margin-top: 5px;">
        @foreach (char c in gameLogic.EncodedText)
        {
            <span style="display: inline-block; width: 30px; text-align: center;">@c</span>
        }
    </div>

    <p>Estado del juego: @gameWon</p>

    <button @onclick="DebugGameState">Debug State</button>
    <button @onclick="ResetGame" style="margin-top: 10px;">Reset</button>
}

@code {
    private GameLogic? gameLogic;
    private bool loading = true;
    private string? errorMessage;
    private bool gameWon = false;

    private void HandleInput(char cipherChar, string? plainChar)
    {
        if (gameLogic != null && !string.IsNullOrEmpty(plainChar))
        {
            var normalizedChar = RemoveDiacritics(plainChar)[0];

            if (char.IsLetter(normalizedChar))
            {
                gameLogic.SetSubstitution(cipherChar, normalizedChar);
                gameWon = gameLogic.IsGameWon(); 
                StateHasChanged();

                // Mover al siguiente cuadro
                _ = MoveToNextInput(cipherChar);
            }
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e, char cipherChar)
    {
        if (e.Key == "ArrowRight")
        {
            await MoveToNextInput(cipherChar);
        }
        else if (e.Key == "ArrowLeft")
        {
            await MoveToPreviousInput(cipherChar);
        }
    }

    private async Task MoveToNextInput(char currentChar)
    {
        int currentIndex = gameLogic.EncodedText.IndexOf(currentChar);
        int nextIndex = currentIndex + 1;

        while (nextIndex < gameLogic.EncodedText.Length && !char.IsLetter(gameLogic.EncodedText[nextIndex]))
        {
            nextIndex++;
        }

        if (nextIndex < gameLogic.EncodedText.Length)
        {
            char nextChar = gameLogic.EncodedText[nextIndex];
            await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('input-{nextChar}').focus()");
        }
    }

    private async Task MoveToPreviousInput(char currentChar)
    {
        int currentIndex = gameLogic.EncodedText.IndexOf(currentChar);
        int previousIndex = currentIndex - 1;

        while (previousIndex >= 0 && !char.IsLetter(gameLogic.EncodedText[previousIndex]))
        {
            previousIndex--;
        }

        if (previousIndex >= 0)
        {
            char previousChar = gameLogic.EncodedText[previousIndex];
            await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('input-{previousChar}').focus()");
        }
    }

    private void DebugGameState()
    {
        if (gameLogic != null)
        {
            var debugData = new
            {
                CipherText = gameLogic.CipherText,
                DecryptedText = gameLogic.DecryptedText,
                SubstitutionMap = gameLogic.SubstitutionMap,
                IsWon = gameLogic.IsGameWon()
            };

            JSRuntime.InvokeVoidAsync("console.log", debugData);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<FraseDto>("api/PedirFraseRandom/random");

            if (response != null && !string.IsNullOrEmpty(response.Contenido))
            {
                gameLogic = new GameLogic(response.Contenido);
                loading = false;
            }
            else
            {
                errorMessage = "No se pudo obtener una frase válida del servidor.";
                loading = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al obtener la frase: {ex.Message}";
            loading = false;
        }
    }

    private string GetMappedChar(char cipherChar)
    {
        if (gameLogic == null) return string.Empty;
        return gameLogic.SubstitutionMap.TryGetValue(cipherChar, out var plainChar) ? plainChar.ToString() : string.Empty;
    }

    private void ResetGame()
    {
        if (gameLogic != null)
        {
            gameLogic = new GameLogic(gameLogic.CipherText);
            gameWon = false;
        }
    }

    private string RemoveDiacritics(string text)
    {
        var normalizedText = text.Normalize(NormalizationForm.FormD);
        var sb = new StringBuilder();

        foreach (var c in normalizedText)
        {
            if (CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark)
            {
                sb.Append(c);
            }
        }

        return sb.ToString();
    }

    public class FraseDto
    {
        public int Id { get; set; }
        public string Contenido { get; set; } = string.Empty;
    }
}

<style>
    input:focus {
        outline: 2px solid blue;
        border-color: blue;
    }

    input {
        border: 1px solid #ccc;
        border-radius: 3px;
        padding: 5px;
        margin: 2px;
        font-size: 16px;
    }
</style>
